@model WebApplication4.Models.Role
@*@model IEnumerable<WebApplication4.Models.Role>*@
@{
    Layout = null;
    if (Session["LoginID"] == null)
    {
        Response.Redirect("~/Login/Index");
    }
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>RoleMaintenance</title>
    <style>
        body {
            font-family: "Lato", sans-serif;
        }

        /* Fixed sidenav, full height */
        .sidenav {
            height: 100%;
            width: 300px;
            position: fixed;
            z-index: 1;
            top: 0;
            left: 0;
            background-color: #111;
            overflow-x: hidden;
            padding-top: 20px;
        }

            /* Style the sidenav links and the dropdown button */
            .sidenav a, .dropdown-btn {
                padding: 6px 8px 6px 16px;
                text-decoration: none;
                font-size: 20px;
                color: #818181;
                display: block;
                border: none;
                background: none;
                width: 100%;
                text-align: left;
                cursor: pointer;
                outline: none;
            }

                /* On mouse-over */
                .sidenav a:hover, .dropdown-btn:hover {
                    color: #f1f1f1;
                }

        /* Main content */
        .main {
            margin-left: 300px; /* Same as the width of the sidenav */
            font-size: 20px; /* Increased text to enable scrolling */
            padding: 0px 10px;
        }

        /* Add an active class to the active dropdown button */
        .active {
            background-color: green;
            color: white;
        }

        /* Dropdown container (hidden by default). Optional: add a lighter background color and some left padding to change the design of the dropdown content */
        .dropdown-container {
            display: none;
            background-color: #262626;
            padding-left: 8px;
        }

        /* Optional: Style the caret down icon */
        .fa-caret-down {
            float: right;
            padding-right: 8px;
        }

        table {
            border-spacing: 0;
            width: 100%;
            border: 1px solid #ddd;
        }

        th {
            cursor: pointer;
        }

        th, td {
            text-align: left;
            padding: 16px;
        }

        tr:nth-child(even) {
            background-color: #f2f2f2
        }


    </style>
</head>
<body>
    <div class="sidenav">
        <a href="@Url.Action("ReturnHome", "Home")">Home</a>
        <button class="dropdown-btn">
            System Setup
            <i class="fa fa-caret-down"></i>
        </button>
        <div class="dropdown-container">
            <a href="@Url.Action("UserMaintain", "SystemSetup")">User Maintenance</a>
            <a href="@Url.Action("RoleMaintain", "SystemSetup")">Role Maintenance</a>
            <a href="@Url.Action("MenuMaintain", "SystemSetup")">Menu Maintenance</a>
        </div>

        <button class="dropdown-btn">
            System Operation
            <i class="fa fa-caret-down"></i>
        </button>
        <div class="dropdown-container">
            <a href="#">Link 1</a>
            <a href="#">Link 2</a>
            <a href="#">Link 3</a>
        </div>

        <button class="dropdown-btn">
            Profile
            <i class="fa fa-caret-down"></i>
        </button>
        <div class="dropdown-container">
            <a href="@Url.Action("ChangePassword", "Home")">Change Password</a>
            <a href="@Url.Action("LogOut", "Home")"> LogOut</a>
        </div>
    </div>

    <div class="main">
        <h2>Role Maintenance</h2>
        @using (Html.BeginForm("function", "RoleMaintenance", FormMethod.Post))
        {
            if (TempData["SelectionMessage"] != null)
            {
                <script>
                alert('@TempData["SelectionMessage"]');
                </script>
            }
            <table>
                <tr>
                    <td>Role</td>
                    <td></td>
                    <td>
                        <select name="SelectRole">
                            <option>All</option>
                            @foreach (var item in Model.ListA)
                            {
                                <option> @item.RoleName</option>
                            }
                        </select>
                    </td>
                </tr>
            </table>
            <table>
                <tr>
                    <td><input type="submit" name="button" value="Query" /></td>
                    <td><input type="submit" name="button" value="Add" /></td>
                    <td><input type="submit" name="button" value="Modify" /></td>
                    <td><input type="submit" name="button" value="Menu" /></td>
                    <td><input type="submit" name="button" value="Delete" onClick = "return confirm('Press a button!')" /></td>
                    
                </tr>
            </table>


            <table id="RoleTable">
                <tr>
                    <td><input type="checkbox" name="checkAll"></td>
                    <th onclick="sortTable(0)"> Role Name</th>
                    <td></td>
                    <th onclick="sortTable(1)"> Role Description</th>
                    <td></td>
                    <th onclick="sortTable(2)"> Status</th>
                    <td></td>
                    <th onclick="sortTable(3)"> Create Date</th>
                    <td></td>
                    <th onclick="sortTable(4)"> Create User</th>
                    <td></td>
                    <th onclick="sortTable(5)"> Modify Date</th>
                    <td></td>
                    <th onclick="sortTable(6)"> Modify User</th>
                </tr>
                @foreach (var item in Model.ListB)
                {

                    <tr>
                        <td><input type="checkbox" name=@item.RoleID.ToString()></td>
                        <td>@item.RoleName</td>
                        <td></td>
                        <td>@item.RoleDescription</td>
                        <td></td>
                        @if (@item.Status == 0)
                        {
                            <td>N</td>
                        }
                        else
                        {
                            <td>Y</td>
                        }
                        <td></td>
                        <td>@item.CreateDate.ToString().AsDateTime().ToString("yyyy/MM/dd")</td>
                        <td></td>
                        <td>@item.CreateUser</td>
                        <td></td>
                        <td>@item.ModifyDate.ToString().AsDateTime().ToString("yyyy/MM/dd")</td>
                        <td></td>
                        <td>@item.ModifyUser</td>
                    </tr>
                }
            </table>

        }
    </div>

    <script>
        /* Loop through all dropdown buttons to toggle between hiding and showing its dropdown content - This allows the user to have multiple dropdowns without any conflict */
        var dropdown = document.getElementsByClassName("dropdown-btn");
        var i;

        for (i = 0; i < dropdown.length; i++) {
            dropdown[i].addEventListener("click", function () {
                this.classList.toggle("active");
                var dropdownContent = this.nextElementSibling;
                if (dropdownContent.style.display === "block") {
                    dropdownContent.style.display = "none";
                } else {
                    dropdownContent.style.display = "block";
                }
            });
        }

        /* When the user clicks on the button,
        toggle between hiding and showing the dropdown content */
        function myFunction() {
            document.getElementById("myDropdown").classList.toggle("show");
        }

        // Close the dropdown if the user clicks outside of it
        window.onclick = function (event) {
            if (!event.target.matches('.dropbtn')) {
                var dropdowns = document.getElementsByClassName("dropdown-content");
                var i;
                for (i = 0; i < dropdowns.length; i++) {
                    var openDropdown = dropdowns[i];
                    if (openDropdown.classList.contains('show')) {
                        openDropdown.classList.remove('show');
                    }
                }
            }
        }

        function sortTable(n) {
            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
            table = document.getElementById("RoleTable");
            switching = true;
            //Set the sorting direction to ascending:
            dir = "asc";
            /*Make a loop that will continue until
            no switching has been done:*/
            while (switching) {
                //start by saying: no switching is done:
                switching = false;
                rows = table.rows;
                /*Loop through all table rows (except the
                first, which contains table headers):*/
                for (i = 1; i < (rows.length - 1); i++) {
                    //start by saying there should be no switching:
                    shouldSwitch = false;
                    /*Get the two elements you want to compare,
                    one from current row and one from the next:*/
                    x = rows[i].getElementsByTagName("TD")[n];
                    y = rows[i + 1].getElementsByTagName("TD")[n];
                    /*check if the two rows should switch place,
                    based on the direction, asc or desc:*/
                    if (dir == "asc") {
                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                            //if so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir == "desc") {
                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                            //if so, mark as a switch and break the loop:
                            shouldSwitch = true;
                            break;
                        }
                    }
                }
                if (shouldSwitch) {
                    /*If a switch has been marked, make the switch
                    and mark that a switch has been done:*/
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    //Each time a switch is done, increase this count by 1:
                    switchcount++;
                } else {
                    /*If no switching has been done AND the direction is "asc",
                    set the direction to "desc" and run the while loop again.*/
                    if (switchcount == 0 && dir == "asc") {
                        dir = "desc";
                        switching = true;
                    }
                }
            }
        }

    </script>
</body>
</html>